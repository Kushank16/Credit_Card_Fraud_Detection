import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#Loading The Dataset from pandas Dataframe
credit_card_data=pd.read_csv('/content/creditcard.csv')

#First 5 row of the data set
credit_card_data.head()

credit_card_data.tail()

#dataset information
credit_card_data.info()

#checking the missing Values in each column
credit_card_data.isnull().sum()

 # distribution of legit transaction & frauldent Transaction
 credit_card_data['Class'].value_counts()


This Dataset Highly Unbalanced

0----> Normal Transaction

1----> Frauldent Transaction

#Separting The Data For Analysis
legit = credit_card_data[credit_card_data.Class==0]
fraud = credit_card_data[credit_card_data.Class==1]



print(legit.shape)
print(fraud.shape)

# statstical measures of data
legit.Amount.describe()

fraud.Amount.describe()


# compare the values of both transactions
credit_card_data.groupby('Class').mean()


Under Sampling
#Build a sample Dataset containing similar distribution of Normal Transaction & Fraud Transaction

#Number Of Fraud Transaction ----->3

legit_sample=legit.sample(n=3)

Concatenting 2 Data frames axis 0= row wise axis 1 = column wise

new_dataset=pd.concat([legit_sample,fraud],axis = 0 )

new_dataset.head()

new_dataset.tail()

 new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

Splitting The data into Features & Targets
X=new_dataset.drop(columns='Class',axis=1)
Y=new_dataset['Class']

print(X)

 print(Y)

Spiltting The Data into Training Data and Testing Data
X_train, X_test , Y_train , Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

ModelTraining

Logistics Regression
model= LogisticRegression()

# training the Logistics Regression Model with Training data
model.fit(X_train, Y_train)

Model Evalution

accuracy Score
#accuracy on training data
X_train_prediction= model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

 print('Accuracy on Training data:',training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy= accuracy_score(X_test_prediction,Y_test)

print('Accuracy score on test data :',test_data_accuracy)


